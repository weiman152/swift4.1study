import UIKit

var str = "Hello, playground"

/*
 swift学习笔记1
 
 简介
 swift出现的目的：为了简化macOS和iOS开发
 特点：
 1.开源
 2.跨平台
 3.面向对象的编程语言
 4.编程范式丰富：面向过程，面向对象，函数式编程
 5.安全性
 */

/*
 swift学习笔记2
 
 基本类型体系
 1.枚举（enum）
 2.结构体（struct）
 3.类（class）
 4.协议（protocol）
 5.函数（function）
 6.复合类型：元组（tuple）
 
 注意：这里并没有像别的语言那样，把基本数据类型和用户自定义数据类型分类。
 
 值类型：枚举和结构体
 引用类型：类和函数
 抽象接口类型：协议
 
 协议到底是值类型还是引用类型要取决于所引用的对象的实际类型。
 
 
 */

//1. 变量 var
var a = 1
a = 2

//2. 常量 let
let b = 10
//b = 8 //报错


//3. 对象声明与类型标注
//swift具有强大的“类型推导”功能，可以根据声明的对象的初始化的值来推导出对象的类型。

//4. 下划线
//在swift中，下划线具有特殊的含义——表示“通配符”。一般用于对象声明中表示一个缺省对象。

//5. 表达式
/*
 四类：
 
 1.前缀表达式
   单目操作符、try操作符
 2.双目表达式
   双目操作符、三目操作符、类型投射操作符
 3.基本表达式
   字面量、self 表达式、超类表达式、闭包表达式、圆括号表达式、元组表达式、隐式成员表达式、通配符表达式、selector表达式、key-path表达式
 4.后缀表达式
   函数调用表达式、初始化器表达式、动态类型表达式、下标表达式、optional表达式
 
 */

// 对于关键字作为标识符，可以使用’‘
let `var` = 0
print("\(`var`)")

/// 这是一个注释
/// 这又是一条注释
/// - author: wm
func foo() {
    
}

foo()


/// 这是一个函数
///
/// - Parameter obj: 一个整数对象
func foo(with obj: Int) {
    
}

/// 这又是一个函数
///
/// - Parameters:
///   - a: 浮点型的对象
///   - b: 浮点型的对象
/// - Returns: 一个整数对象
/// - Throws: 可能会抛出异常
func foo(a: Float, b: Float) throws -> Int {
    return Int(a + b)
}






